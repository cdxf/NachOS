// exception.cc 
//	Entry point into the Nachos kernel from user programs.
//	There are two kinds of things that can cause control to
//	transfer back to here from user code:
//
//	syscall -- The user code explicitly requests to call a procedure
//	in the Nachos kernel.  Right now, the only function we support is
//	"Halt".
//
//	exceptions -- The user code does something that the CPU can't handle.
//	For instance, accessing memory that doesn't exist, arithmetic errors,
//	etc.  
//
//	Interrupts (which can also cause control to transfer from user
//	code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"

//----------------------------------------------------------------------
// ExceptionHandler
// 	Entry point into the Nachos kernel.  Called when a user program
//	is executing, and either does a syscall, or generates an addressing
//	or arithmetic exception.
//
// 	For system calls, the following is the calling convention:
//
// 	system call code -- r2
//		arg1 -- r4
//		arg2 -- r5
//		arg3 -- r6
//		arg4 -- r7
//
//	The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//	"which" is the kind of exception.  The list of possible exceptions 
//	are in machine.h.
//----------------------------------------------------------------------

void
ExceptionHandler(ExceptionType which)
{
    int type = machine->ReadRegister(2);
	// Input: reg4 -filename (string)
// Output: reg2 -1: error and 0: success
// Purpose: process the event SC_Create of System call
// mã system call sẽ được đưa vào thanh ghi r2 (có thể xem lại phần xử lý cho
// system call Halt trong tập tin start.s ở trên)
// tham số thứ 1 sẽ được đưa vào thanh ghi r4
// tham số thứ 2 sẽ được đưa vào thanh ghi r5
// tham số thứ 3 sẽ được đưa vào thanh ghi r6
// tham số thứ 4 sẽ được đưa vào thanh ghi r7
// kết quả thực hiện của system call sẽ được đưa vào thanh ghi r2
switch (which) {
   case NoException:
      return;
   case SyscallException:
      switch (type){
          case SC_Halt:
             DEBUG(‘a’, "\n Shutdown, initiated by user program.");
             printf ("\n\n Shutdown, initiated by user program.");
             interrupt->Halt();
             break;

}
